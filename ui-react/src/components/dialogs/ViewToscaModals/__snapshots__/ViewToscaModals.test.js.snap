// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Verify ViewToscaModals Test the tosca model view render method 1`] = `
<Styled(Bootstrap(Modal))
  onHide={[Function]}
  show={true}
  size="xl"
>
  <ModalHeader
    closeButton={true}
    closeLabel="Close"
  >
    <ModalTitle
      className="title"
    >
      View Tosca Model
    </ModalTitle>
  </ModalHeader>
  <ModalBody>
    <WithStyles(Component)
      columns={
        Array [
          Object {
            "cellStyle": Object {
              "border": "1px solid black",
            },
            "field": "index",
            "headerStyle": Object {
              "backgroundColor": "#ddd",
              "border": "2px solid black",
            },
            "render": [Function],
            "title": "#",
          },
          Object {
            "cellStyle": Object {
              "border": "1px solid black",
            },
            "field": "toscaModelName",
            "headerStyle": Object {
              "backgroundColor": "#ddd",
              "border": "2px solid black",
            },
            "title": "Micro Service Name",
          },
          Object {
            "cellStyle": Object {
              "border": "1px solid black",
            },
            "field": "policyType",
            "headerStyle": Object {
              "backgroundColor": "#ddd",
              "border": "2px solid black",
            },
            "title": "PolicyType",
          },
          Object {
            "cellStyle": Object {
              "border": "1px solid black",
            },
            "field": "version",
            "headerStyle": Object {
              "backgroundColor": "#ddd",
              "border": "2px solid black",
            },
            "title": "Version",
          },
          Object {
            "cellStyle": Object {
              "border": "1px solid black",
            },
            "field": "userId",
            "headerStyle": Object {
              "backgroundColor": "#ddd",
              "border": "2px solid black",
            },
            "title": "Uploaded By",
          },
          Object {
            "cellStyle": Object {
              "border": "1px solid black",
            },
            "editable": "never",
            "field": "lastUpdatedDate",
            "headerStyle": Object {
              "backgroundColor": "#ddd",
              "border": "2px solid black",
            },
            "title": "Uploaded Date",
          },
        ]
      }
      data={
        Object {
          "index": "1",
          "lastUpdatedDate": "05-07-2019 19:09:42",
          "policyType": "mtca",
          "toscaModelJson": "{\\"schema\\":{\\"type\\":\\"object\\",\\"title\\":\\"MTCA Config\\",\\"required\\":[\\"context\\",\\"signatures\\"],\\"properties\\":{\\"context\\":{\\"propertyOrder\\":1001,\\"uniqueItems\\":\\"true\\",\\"format\\":\\"select\\",\\"title\\":\\"Context\\",\\"type\\":\\"array\\",\\"items\\":{\\"options\\":{\\"enum_titles\\":[\\"NONE\\",\\"PROD\\"]},\\"type\\":\\"string\\",\\"enum\\":[\\"NONE\\",\\"PROD\\"]}},\\"signatures\\":{\\"propertyOrder\\":1002,\\"uniqueItems\\":\\"true\\",\\"format\\":\\"tabs-top\\",\\"title\\":\\"Signatures\\",\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"required\\":[\\"closedLoopControlName\\",\\"severity\\",\\"ageLimit\\",\\"maxInterval\\",\\"minMessageViolations\\",\\"thresholds\\"],\\"properties\\":{\\"severity\\":{\\"propertyOrder\\":1006,\\"minLength\\":1,\\"title\\":\\"Severity\\",\\"type\\":\\"string\\",\\"enum\\":[\\"NORMAL\\",\\"CRITICAL\\",\\"MAJOR\\",\\"MINOR\\",\\"WARNING\\"]},\\"ageLimit\\":{\\"propertyOrder\\":1007,\\"default\\":3600,\\"maximum\\":4500,\\"title\\":\\"Age limit (0- 4500 secs)\\",\\"type\\":\\"integer\\",\\"minimum\\":0},\\"useCaseName\\":{\\"propertyOrder\\":1004,\\"title\\":\\"Name\\",\\"type\\":\\"string\\"},\\"thresholds\\":{\\"minItems\\":1,\\"propertyOrder\\":1010,\\"uniqueItems\\":\\"true\\",\\"format\\":\\"tabs-top\\",\\"title\\":\\"Threshold\\",\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"object\\",\\"required\\":[\\"direction\\",\\"thresholdValue\\"],\\"properties\\":{\\"thresholdValue\\":{\\"propertyOrder\\":1013,\\"maximum\\":9999,\\"title\\":\\"Threshold\\",\\"type\\":\\"integer\\",\\"minimum\\":0},\\"thresholdName\\":{\\"propertyOrder\\":1011,\\"options\\":{\\"enum_titles\\":[\\"PMRAATTCBRA\\",\\"PMCELLDOWNTIMEAUTO\\",\\"PMCELLDOWNTIMEMAN\\",\\"BS_Reset_Needed_UC2\\",\\"PMRRCCONNESTABATT\\",\\"PMRRCCONNESTABSUCC\\",\\"PMRRCCONNESTABFLCELLLATENCY\\"]},\\"title\\":\\"Metric\\",\\"type\\":\\"string\\",\\"enum\\":[\\"PMRAATTCBRA\\",\\"PMCELLDOWNTIMEAUTO\\",\\"PMCELLDOWNTIMEMAN\\",\\"BS_Reset_Needed_UC2\\",\\"PMRRCCONNESTABATT\\",\\"PMRRCCONNESTABSUCC\\",\\"PMRRCCONNESTABFLCELLLATENCY\\"]},\\"direction\\":{\\"propertyOrder\\":1012,\\"title\\":\\"Operator\\",\\"type\\":\\"string\\",\\"enum\\":[\\"GREATER\\",\\"LESS\\",\\"EQUAL\\"]}}}},\\"minMessageViolations\\":{\\"propertyOrder\\":1009,\\"default\\":0,\\"maximum\\":9999,\\"title\\":\\"Min Violations\\",\\"type\\":\\"integer\\",\\"minimum\\":0},\\"maxInterval\\":{\\"propertyOrder\\":1008,\\"default\\":0,\\"maximum\\":9999,\\"title\\":\\"Max Intervals\\",\\"type\\":\\"integer\\",\\"minimum\\":0},\\"nfNamingCode\\":{\\"propertyOrder\\":1005,\\"options\\":{\\"enum_titles\\":[\\"ENBE\\",\\"MEAP\\"]},\\"title\\":\\"nfNaming Code\\",\\"type\\":\\"string\\",\\"enum\\":[\\"ENBE\\",\\"MEAP\\"]},\\"closedLoopControlName\\":{\\"propertyOrder\\":1003,\\"minLength\\":1,\\"options\\":{\\"enum_titles\\":[]},\\"title\\":\\"Policy\\",\\"type\\":\\"string\\",\\"enum\\":[]}}}}}}}",
          "toscaModelName": "DCAE_MTCAConfig",
          "toscaModelYaml": "tosca_definitions_version: tosca_simple_yaml_1_0_0
node_types:
  policy.nodes.DCAE_MTCA_Config:
    derived_from: policy.nodes.Tosca
    properties:
      DCAE_MTCAConfig:
        type: policy.data.DCAE_MTCA_Context
        description: MTCA Config

data_types:
  policy.data.DCAE_MTCA_Context:
    derived_from: tosca.nodes.Root        
    properties:
      context:
        type: list
        description: Context
        required: true
        entry_schema: 
          type: String 
          constraints: 
            - valid_values: [ \\"Dictionary:mtcaContext\\" ]
      signatures:
        type: list
        description: Signatures
        required: true
        entry_schema:
          type: policy.data.signatures
          
  policy.data.signatures:
    derived_from: tosca.nodes.Root        
    properties:              
      closedLoopControlName:
        type: string
        description: Policy
        required: true
        constraints:
          - min_length: 1                               
          - valid_values: [ \\"Dictionary:userDefined\\" ]
          
      useCaseName:
        type: string
        description: Name
        min_length: 1
        
      nfNamingCode:
        type: string
        description: nfNaming Code
        constraints:
          - valid_values: [ \\"Dictionary:NfNamingCode\\" ] 
        
      severity:
        type: string
        description: Severity
        required: true
        constraints:
          - min_length: 1
          - valid_values: [ \\"NORMAL\\", \\"CRITICAL\\", \\"MAJOR\\", \\"MINOR\\", \\"WARNING\\" ]
          
      ageLimit:
        type: integer 
        description: Age limit (0- 4500 secs)
        default: 3600
        required: true
        constraints:
          - in_range: [ 0, 4500 ]
          
      maxInterval:
        type: integer
        description: Max Intervals
        default: 0
        required: true
        constraints:
        - in_range: [ 0, 9999 ]
        
      minMessageViolations:
        type: integer
        description: Min Violations
        default: 0
        required: true
        constraints:
        - in_range: [ 0, 9999 ]
                
      thresholds:
        type: list
        description: Threshold
        constraints: 
          - min_length: 1          
        required: true
        entry_schema:
           type: policy.data.threshold

  policy.data.threshold:
    derived_from: tosca.nodes.Root        
    properties:
      thresholdName:
        type: string
        description: Metric
        constraints:
          - valid_values: [ \\"Dictionary:ThresholdName\\" ]
      direction:
        type: string
        description: Operator
        required: true
        constraints:
          - valid_values: [ \\"GREATER\\", \\"LESS\\", \\"EQUAL\\" ]                  
      thresholdValue:
        type: integer 
        description: Threshold
        required: true
        constraints:
          - in_range: [ 0, 9999 ]",
          "userId": "aj928f",
          "version": "16",
        }
      }
      icons={
        Object {
          "Check": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
          "DetailPanel": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
          "Filter": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
          "FirstPage": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
          "LastPage": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
          "NextPage": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
          "PreviousPage": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
          "ResetSearch": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
          "Search": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
          "SortArrow": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
          "ThirdStateCheck": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
          "ViewColumn": Object {
            "$$typeof": Symbol(react.forward_ref),
            "render": [Function],
          },
        }
      }
      onRowClick={[Function]}
      options={
        Object {
          "headerStyle": Object {
            "backgroundColor": "#ddd",
            "border": "1px solid black",
            "fontSize": "15pt",
            "text": "bold",
          },
          "rowStyle": [Function],
        }
      }
      title="View ToscaModel"
    />
    <styled.div>
      <styled.textarea
        onChange={[Function]}
        value="Please select Tosca model to view the details"
      />
    </styled.div>
  </ModalBody>
  <ModalFooter>
    <Button
      active={false}
      disabled={false}
      onClick={[Function]}
      type="button"
      variant="secondary"
    >
      Close
    </Button>
  </ModalFooter>
</Styled(Bootstrap(Modal))>
`;
