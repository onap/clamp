<?xml version="1.0" encoding="UTF-8"?>
<!--
  ============LICENSE_START=======================================================
  ONAP CLAMP
  ================================================================================
  Copyright (C) 2017-2019 AT&T Intellectual Property. All rights
                              reserved.
  ================================================================================
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  ============LICENSE_END============================================
  ===================================================================
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.onap.clamp</groupId>
	<artifactId>clds</artifactId>
	<version>5.1.0-SNAPSHOT</version>
	<name>clamp</name>
	<packaging>pom</packaging>


	  <parent>
		<groupId>org.onap.oparent</groupId>
		<artifactId>oparent</artifactId>
		<version>2.1.0</version>
	 </parent>

    <modules>
        <module>controlloop-models</module>
        <module>clamp-main</module>
    </modules>

    <description>
	       This is the MAVEN project that builds everything for ONAP CLAMP.
	       Docker engine is normally requires to perfom all possible tasks (including integration tests)

           It can build:
           - The ONAP CLAMP JAR that contains CLAMP back-end code.
           - The DOCKER images for:
                * CLAMP backend (Java Spring)
                * CLAMP frontend (Javscript React)

           It can test:
            - The CLAMP backend, JAVA unit testing
            - The CLAMP backend, JAVA integration tests (with Spring + docker mariadb database + docker policy/dcae emulator written in python)
            - The CLAMP frontend, Javascrip tests (NodeJS(NPM) + JEST + Enzyme fro React)

           The test coverage for dev's can be found after a "clean install" build in:
            - Clamp backend: target/jacoco-dev.exec (unit tests + integration tests merged)
                or separately target/coverage-reports/jacoco.exec and target/coverage-reports/jacoco-it.exec
            - Clamp frontend: target/ui-react/coverage

           Useful mvn commands:
            - mvn clean install: Build Clamp backend JAR + unit tests + integration tests + NPM tests (+coverage for all)
            - mvn clean install -DskipITs=true: Build Clamp backend JAR + unit tests + NPM tests (+coverage for all), it does not require a DOCKER engine
            - mvn clean install -DskipTests -P docker: Build Clamp backend JAR + all docker images

           To start CLAMP (Build it before):
            - Use docker-compose file in ./extra/docker/clamp/docker-compose.yml
            - Use the script located in ./extra/bin/start-backend.sh + start-frontend.sh
            - Use your IDE to use the Jar or start NVM/NPM

        </description>

	<properties>
		<maven.build.timestamp.format>yyyyMMdd'T'HHmmss'Z'</maven.build.timestamp.format>
		<clamp.project.version>${project.version}</clamp.project.version>
		<clamp.build.timestamp>${maven.build.timestamp}</clamp.build.timestamp>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<eelf.core.version>1.0.0</eelf.core.version>
		<camel.version>2.25.2</camel.version>
		<springboot.version>2.2.9.RELEASE</springboot.version>

		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.surefire.reportsPath>${project.build.directory}/surefire-reports</sonar.surefire.reportsPath>
		<sonar.coverage.jacoco.xmlReportPaths>${project.build.directory}/jacoco-html-xml-reports/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
		<sonar.jacoco.reportMissing.force.zero>true</sonar.jacoco.reportMissing.force.zero>
		<sonar.projectVersion>${project.version}</sonar.projectVersion>
		<sonar.log.level>DEBUG</sonar.log.level>
		<sonar.nodejs.executable>${project.build.directory}/${ui.react.src}/node/node</sonar.nodejs.executable>
		<sonar.verbose>true</sonar.verbose>
		<sonar.sources>src/main,${project.build.directory}/${ui.react.src}/src</sonar.sources>
		<sonar.exclusions>src/main/resources/**</sonar.exclusions>
		<sonar.scm.exclusions.disabled>true</sonar.scm.exclusions.disabled>
		<sonar.javascript.lcov.reportPaths>${project.build.directory}/${ui.react.src}/coverage/lcov.info</sonar.javascript.lcov.reportPaths>
		<sonar.coverage.exclusions>src/main/resources/**,target/ui-react/src/**/*.test.js,target/ui-react/src/setupTests.js</sonar.coverage.exclusions>
		<docker.push.registry>localhost:5000</docker.push.registry>
		<docker.pull.registry>nexus3.onap.org:10001</docker.pull.registry>
		<docker.skip.build>true</docker.skip.build>
		<docker.skip.push>true</docker.skip.push>
		<docker.skip.tag>true</docker.skip.tag>
		<skip.staging.artifacts>false</skip.staging.artifacts>
		<python.http.proxy.param />
		<tomcat.version>9.0.37</tomcat.version>
		<ui.react.src>ui-react</ui.react.src>
		<ui.react.lib.src>ui-react-lib</ui.react.lib.src>
		<npm.publish.url>https://nexus3.onap.org/repository/npm.snapshot/</npm.publish.url>
	</properties>

	<profiles>
		<!-- BEGIN: NOT USABLE profiles, those are defined when specific flags are enabled -->
		<profile>
			<id>without-test</id>
			<activation>
				<property>
					<name>maven.test.skip</name>
					<value>true</value>
				</property>
			</activation>
			<properties>
				<docker.skip.run>true</docker.skip.run>
				<docker.skip>true</docker.skip>
			</properties>
		</profile>
		<profile>
			<id>without-IT-only</id>
			<activation>
				<property>
					<name>skipITs</name>
					<value>true</value>
				</property>
			</activation>
			<properties>
				<docker.skip.run>true</docker.skip.run>
				<docker.skip>true</docker.skip>
			</properties>
		</profile>
		<profile>
			<id>without-IT-only2</id>
			<activation>
				<property>
					<name>skipTests</name>
					<value>true</value>
				</property>
			</activation>
			<properties>
				<docker.skip.run>true</docker.skip.run>
				<docker.skip>true</docker.skip>
			</properties>
		</profile>
		<!-- END: NOT USABLE profiles, those are defined when specific flags are enabled -->
		<profile>
			<id>docker</id>
			<properties>
				<skip.staging.artifacts>true</skip.staging.artifacts>
				<docker.skip.build>false</docker.skip.build>
				<docker.skip.tag>false</docker.skip.tag>
				<docker.skip.push>false</docker.skip.push>
				<docker.skip>false</docker.skip>
			</properties>
		</profile>
	</profiles>

	<distributionManagement>
		<repository>
			<id>ecomp-releases</id>
			<name>Clamp Release Repository</name>
			<url>https://nexus.onap.org/content/repositories/releases/</url>
		</repository>
		<snapshotRepository>
			<id>ecomp-snapshots</id>
			<name>Clamp Snapshot Repository</name>
			<url>https://nexus.onap.org/content/repositories/snapshots/</url>
		</snapshotRepository>
		<site>
			<id>ecomp-site</id>
			<url>dav:https://nexus.onap.org/content/sites/site/org/onap/clamp/${project.version}</url>
		</site>
	</distributionManagement>

	<repositories>
		<repository>
			<id>onap-public</id>
			<name>onap-public</name>
			<url>https://nexus.onap.org/content/repositories/public/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>ecomp-releases</id>
			<name>ONAP Release Repository</name>
			<url>https://nexus.onap.org/content/repositories/releases/</url>
		</repository>
		<repository>
			<id>ecomp-staging</id>
			<name>ONAP Staging Repository</name>
			<url>https://nexus.onap.org/content/repositories/staging/</url>
		</repository>
		<repository>
			<id>ecomp-snapshots</id>
			<name>ONAP Snapshot Repository</name>
			<url>https://nexus.onap.org/content/repositories/snapshots/</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
			<releases>
				<enabled>false</enabled>
			</releases>
		</repository>
		<repository>
			<id>central</id>
			<url>http://repo1.maven.org/maven2/</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>onap-public</id>
			<name>onap-public</name>
			<url>https://nexus.onap.org/content/repositories/public/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>central</id>
			<url>http://repo1.maven.org/maven2/</url>
		</pluginRepository>
	</pluginRepositories>

	<dependencyManagement>
		<dependencies>
			<!-- Spring Boot BOM -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${springboot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- Camel BOM -->
			<dependency>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-spring-boot-dependencies</artifactId>
				<version>${camel.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>com.att.eelf</groupId>
			<artifactId>eelf-core</artifactId>
			<version>${eelf.core.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.powermock</groupId>
					<artifactId>powermock-module-junit4</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.powermock</groupId>
					<artifactId>powermock-api-mockito</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.codehaus.janino</groupId>
			<artifactId>janino</artifactId>
			<version>3.0.8</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-core</artifactId>
			<version>${tomcat.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-el</artifactId>
			<version>${tomcat.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-websocket</artifactId>
			<version>${tomcat.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-annotations-api</artifactId>
			<version>${tomcat.version}</version>
		</dependency>
		<!-- For CAMEL -->
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-http4-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-jaxb-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-servlet-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-gson-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-swagger-java-starter</artifactId>
			<exclusions>
				<exclusion>
					<groupId>javax.ws.rs</groupId>
					<artifactId>jsr311-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-ext</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- Spring famework -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-json</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-autoconfigure</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>com.vaadin.external.google</groupId>
					<artifactId>android-json</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- Others dependencies -->
		<dependency>
			<groupId>org.onap.aaf.authz</groupId>
			<artifactId>aaf-cadi-aaf</artifactId>
			<version>2.1.15</version>
			<exclusions>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>1.2.3</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.3</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>
		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-vfs2</artifactId>
			<version>2.2</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.transaction</groupId>
			<artifactId>jta</artifactId>
			<version>1.1</version>
		</dependency>
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>persistence-api</artifactId>
			<version>1.0.2</version>
		</dependency>
		<!-- Other dependencies to fix nexus IQ reported vulnerabilities -->
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.14</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>5.2.3.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.plexus</groupId>
			<artifactId>plexus-utils</artifactId>
			<version>3.0.24</version>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_2.0_spec</artifactId>
			<version>1.0.1.Final</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>27.0-jre</version>
		</dependency>

		<!-- Remove the MYSQL connector and replace it by Mariadb -->
		<dependency>
			<groupId>org.mariadb.jdbc</groupId>
			<artifactId>mariadb-java-client</artifactId>
			<version>2.6.2</version>
		</dependency>
		<!-- For SDC Controller -->
		<dependency>
			<groupId>org.onap.sdc.sdc-distribution-client</groupId>
			<artifactId>sdc-distribution-client</artifactId>
			<version>1.3.0</version>
		</dependency>
		<dependency>
			<groupId>org.onap.sdc.sdc-tosca</groupId>
			<artifactId>sdc-tosca</artifactId>
			<version>1.5.1</version>
			<exclusions>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-databind</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.yaml</groupId>
			<artifactId>snakeyaml</artifactId>
			<version>1.26</version>
		</dependency>
		<dependency>
			<groupId>org.dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>2.1.3</version>
		</dependency>

		<!-- TESTING -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>3.10.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>2.28.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito2</artifactId>
			<version>2.0.4</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<version>2.0.4</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.github.docker-java</groupId>
			<artifactId>docker-java-core</artifactId>
			<version>3.2.1</version>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-databind</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.github.docker-java</groupId>
			<artifactId>docker-java</artifactId>
			<version>3.2.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

</project>
